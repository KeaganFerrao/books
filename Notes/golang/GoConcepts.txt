Go Concepts:

##CHANNELS:

Sending to a channel:

1. If the channel is unbuffered, sending to the channel will block until there is a receiver ready to receive the value. This ensures that the value sent is immediately received by a receiver goroutine.
2. If the channel is buffered and the buffer is not full, sending to the channel will not block. The value will be stored in the buffer and the send operation will proceed immediately.
3. If the channel is buffered and the buffer is full, sending to the channel will block until there is space available in the buffer (i.e., until a value is received from the channel).
Receiving from a channel:

4. If the channel is unbuffered, receiving from the channel will block until there is a sender ready to send a value. This ensures that the receiver always receives a value that was immediately sent by a sender.
5. If the channel is buffered and the buffer is not empty, receiving from the channel will not block. The receiver will immediately get the value from the buffer.
6. If the channel is buffered and the buffer is empty, receiving from the channel will block until a value is sent to the channel (i.e., until a sender is ready to send a value).

// Declare send only channel
func sendOnlyChannelSender(ch chan<- int) {
}

// Declare read only channel
func readOnlyChannelReceiver(ch <-chan int) {
}